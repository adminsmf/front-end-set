// title: 找到所有数组中消失的数字

// 给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

// 找到所有在 [1, n] 范围之间没有出现在数组中的数字。

// 您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

// 示例:

// 输入:
// [4,3,2,7,8,2,3,1]

// 输出:
// [5,6]

// 思路
// 1、哈希表方法
// 非正查过数组：[4,3,2,7,8,2,3,1]
// 正常数组：[1,2,3,4,5,6,7,8]
// 对应下标：[0,1,2,3,4,5,6,7]
// 新建一个map，然后遍历数组，设置nums[i]为true。
// 如果数组是完整的，则必然有map(1)到map(8)都为true
// 如果数组不完整，如上则有map(5),map(6)为undefined
// 然后再次遍历数组，此时我们只需要判断对应的下标有没有对应的值即可。也就是说如果map(i)对应的值不存在，则说明(i)不存在

// 2、原地修改方法
// 我们知道正常的有序数组和数组的下标一定是一一对应的即
// 正常数组：[1,2,3,4,5,6,7,8]
// 对应下标：[0,1,2,3,4,5,6,7]
// 当数组是无序的时候，假如数组并没有缺少数字，那么原则上我们通过不断交换，它必然会与上面对应关系一致
// 而我们需要做的就是，找出如何交换数组的方法
// 我们拿[4,3,2,7,8,2,3,1]为例：
// 第一个元素4，它本来应该在nums[3]的位置也就是元素7的位置，也就是nums[nums[0] - 1] !== nums[i]的时候。所以我们将(4, 7)对调
// 此时数组为[7,3,2,4,8,2,3,1]，这个时候第一个元素为7，本来应该在nums[6]也就是元素3的位置，所以我们将(7, 3)对调
// 此时数组为[3,3,2,4,8,2,7,1]，这个时候第一个元素为3，本来应该在nums[2]也就是元素2的位置，所以我们将(3, 2)对调
// 此时数组为[2,3,3,4,8,2,7,1]，这个时候第一个元素为2，本来应该在nums[1]也就是元素3的位置，所以我们将(2, 3)对调
// 此时数组为[3,2,3,4,8,2,7,1]，这个时候第一个元素为3，本来应该在nums[2]也就是元素3的位置。我们发现nums[2]的元素已经是3了，这个时候我们跳过进入下一个。
// 以此类推，不断交换后，得到[ 1, 2, 3, 4, 3, 2, 7, 8 ]，每一个元素都已经在对应的位置上了。然后我们直接对比下标（nums[i] !== i + 1）就很清楚哪一个是缺失的了

// 3、原地哈希方法
// 使用符号来标记元素是否出现过。下标为 i 的元素的符号，代表着值为 i + 1 的元素是否出现过。负号是出现过，正号是没出现过
// 我们拿[4,3,2,7,8,2,3,1]为例：
// 第一个元素为4,则代表下标为3的元素是存在的，即元素7，此时我们将7置为-7,负号标识出现过。
// 以此类推，当我们把数组遍历一遍之后，所有下标对应的元素都将被打上负号，而没有被打上负号的元素，则代表了当前位置未出现

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
  let map = new Map(),
    arr = []
  for (let i = 0; i < nums.length; i++) {
    map.set(nums[i], true)
  }
  for (let i = 0; i < nums.length; i++) {
    if (!map.get(i + 1)) {
      arr.push(i + 1)
    }
  }
  return arr
}

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
  let i = 0,
    arr = []
  while (i < nums.length) {
    if (nums[nums[i] - 1] !== nums[i]) {
      ;[nums[nums[i] - 1], nums[i]] = [nums[i], nums[nums[i] - 1]]
    } else {
      i++
    }
  }
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] !== i + 1) {
      arr.push(i + 1)
    }
  }
  return arr
}

/**
 * @param {number[]} nums
 * @return {number[]}
 */
var findDisappearedNumbers = function(nums) {
  let arr = []
  for (let i = 0; i < nums.length; i++) {
    let index = Math.abs(nums[i]) - 1
    nums[index] = Math.abs(nums[index]) * -1
  }
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] > 0) {
      arr.push(i + 1)
    }
  }
  return arr
}

// case1 输入：[4,3,2,7,8,2,3,1] 预期：[5,6]
console.log(findDisappearedNumbers([4, 3, 2, 7, 8, 2, 3, 1]))
